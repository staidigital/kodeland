// section1.js

export default [

  // üîπ INTRODUCTION
  {
    id: "sectionOne",
    title: "",
    blocks: [
      {
        type: 'paragraph',
        text: 'I JavaScript (og i programmering generelt) bruker vi ^^variabler^^ for √• lagre ting vi vil bruke senere. Det kan v√¶re et tall, et navn eller noe annet vi trenger i koden v√•r.'
      },
      {
        type: 'paragraph',
        text: 'For √• lage en variabel i JavaScript, kan vi bruke tre ord: `var`, `let` og `const`. De gj√∏r nesten det samme, men det er noen forskjeller p√• hvordan og n√•r vi b√∏r bruke dem.'
      }
    ]
  },

  // üîπ VAR
  {
    id: "sectionTwo",
    title: "1. Det `var` en gang",
    blocks: [
      {
        type: 'paragraph',
        text: '`var` er den gamle m√•ten √• lage variabler p√• i JavaScript. F√∏r 2015 brukte mange `var`, men i dag bruker vi heller `let` eller `const`.'
      },
      {
        type:'paragraph',
        text:'N√•r du lager en variabel med `var`, kan du endre verdien senere. I JavaScript skriver vi ting til ^^terminalen^^ med `console.log()`.'
      },
      {
        type: 'code',
        language: 'javascript',
        code: `var name = "Jens";
console.log(name);
name = "Faizan"; //n√• er variabelen endret
console.log(name);`
      },
      {
        type: 'paragraph',
        text: '`var` har **ikke** det vi kaller ^^blokkscope^^. Det betyr at hvis du lager en variabel med `var` inne i en blokk med klammeparenteser `{}` ‚Äì s√•nne som vi bruker i `if`-setninger eller `for`-l√∏kker, kan du fortsatt bruke den utenfor.'
      },
      {
        type: 'code',
        language: 'javascript',
        code: `if (true) {
  var melding = "Hei!";
}
console.log(melding); // funker ‚Äì selv om den ble laget inni if-blokken`
      },
      
      {
        type: 'paragraph',
        text: 'Dette kan f√∏re til rare feil ‚Äì for eksempel at du tror en variabel bare kan brukes inni en blokk, men s√• blir den brukt videre i koden og skaper tr√∏bbel.'
      },
      {
        type: 'paragraph',
        text: 'Med `let` skjer ikke dette. Den holder seg der du laget den. Det gj√∏r koden din enklere √• forst√• og mindre rotete.'
      }
    ]
  },

  // üîπ LET
  {
    id: "sectionThree",
    title: "2. Den nye m√•ten: `let`",
    blocks: [
      {
        type: 'paragraph',
        text: '`let` kom i 2015 med en ny versjon av JavaScript (ES6), og den brukes mye i dag.'
      },
      {
        type: 'paragraph',
        text: 'Akkurat som med `var`, kan du lage en variabel med `let` og du kan endre verdien senere:'
      },
      {
        type: 'code',
        language: 'javascript',
        code: `let alder = 30;
console.log(alder);
alder = 31;
console.log(alder);`
      },
      {
        type: 'paragraph',
        subtitle: 'Forskjellen fra `var`:'
      },
      {
        type: 'paragraph',
        text: 'Dersom en variabel lages med `let` inne i en blokk, vil den bare kunne brukes inne i blokken. Det vil si at `let` har ^^blokkscope^^.'
      },
      {
        type: 'code',
        language: 'javascript',
        code: `if (true) {
  let melding = "Hei!";
  console.log(melding); // funker
}
console.log(melding); // funker ikke ‚Äì "melding" finnes ikke utenfor blokka`
      }
    ]
  },

  // üîπ CONST
  {
    id: "sectionFour",
    title: "3. N√•r noe ikke skal endres: `const`",
    blocks: [
      {
        type:'paragraph',
        text: 'Hvis du vil lage en variabel som **ikke kan endres**, bruker du `const`.'
      },
      {
        type:'code',
        language:'javascript',
        code: `const country = "Norway";
country = "Sweden"; // Feil! Vi kan ikke endre en const
console.log(country);`
      },
      {
        type:'paragraph',
        text: 'N√•r du bruker `const`, m√• du gi den en verdi med √©n gang ‚Äì og den verdien kan ikke byttes ut senere. Det gj√∏r `const` perfekt for ting som aldri skal forandres, som f.eks. navnet p√• en app, en fast pris eller et maks antall fors√∏k.'
      },
      {
        type: 'paragraph',
        text: '`const` virker p√• samme m√•te som `let` n√•r det gjelder hvor den gjelder ‚Äì den virker bare inne i blokken den ble laget i.'
      }
    ]
  },

  // üîπ Oppsummering
  {
    id: "Oppsummering",
    title: "Enkelt sagt",
    blocks: [
      {
        type:'list',
        items: [
          'Bruk `const` som standard ‚Äì det gj√∏r koden trygg og ryddig.',
          'Bruk `let` n√•r du vet at verdien skal endres.',
          'Unng√• `var` ‚Äì det kan f√∏re til rare feil og forvirring.'
        ]
      },
      {
        type:'code',
        language:'javascript',
        code: `const country = "Norway";
country = "Sweden"; // Feil! Vi kan ikke endre en const
console.log(country);`
      }
    ]
  },

  // üìù TASKS
  {
  id: "sectionVarLetConstQuiz",
  title: "Flervalgsoppgaver - teori",
  blocks: [
    {
      type: 'paragraph',
      text: 'La oss teste hva du har l√¶rt om variabler. Svar p√• sp√∏rsm√•lene under:'
    },

    {
      type: 'task',
      number: 1,
      title: 'Hva er forskjellen p√• `var` og `let` n√•r det gjelder blokk-scope?',
      description: 'Klikk p√• det riktige svaret:',
      solution: {
        correct: 2,
        options: [
          '`var` virker bare inne i blokken den ble laget i',
          '`let` virker overalt, ogs√• utenfor blokken',
          '`let` virker bare i blokken den ble laget i, mens `var` virker utenfor ogs√•',
          'Ingen forskjell ‚Äì begge virker p√• samme m√•te'
        ]
      }
    },
    {
      type: 'task',
      number: 2,
      title: 'N√•r b√∏r du bruke `const`?',
      description: 'Klikk p√• det riktige svaret:',
      solution: {
        correct: 1,
        options: [
          'N√•r du skal lage en variabel du vet skal endres senere',
          'N√•r du vil at verdien aldri skal kunne endres',
          'N√•r du trenger en rask variabel midlertidig',
          'N√•r du skal skrive ut noe i konsollen'
        ]
      }
    },

    {
      type: 'task',
      number: 3,
      title: 'Hva skjer hvis du pr√∏ver √• bruke en `let`-variabel utenfor blokka den ble laget i?',
      description: 'Klikk p√• det riktige svaret:',
      solution: {
        correct: 0,
        options: [
          'Du f√•r en feilmelding ‚Äì variabelen finnes ikke der',
          'Den virker som vanlig, akkurat som `var`',
          'JavaScript lager automatisk en global variabel',
          'Ingenting skjer ‚Äì koden blir ignorert'
        ]
      }
    }
  ]
  },
{
  id: "sectionTasks",
  title: 'Programmeringsoppgaver ‚Äì i nettleseren!',
  blocks: [
    {
      type: 'paragraph',
      text: 'üõ†Ô∏è For √• gj√∏re disse oppgavene, skal du lage din egen HTML-fil p√• maskinen din. √Öpne Visual Studio Code og lag en ny fil som du kaller `oppgaver.html`.'
    },
    {
      type: 'paragraph',
      text: 'üß™ Inne i `oppgaver.html` lager du et `<script>`-omr√•de der du kan skrive JavaScript. Det ser slik ut:'
    },
    {
      type: 'code',
      language: 'html',
      preview: 'false',
      code:
`<!DOCTYPE html>
<html>
  <head>
    <title>Mine JS-oppgaver</title>
  </head>
  <body>
    <script>
      // Her skal du skrive koden til oppgavene
    </script>
  </body>
</html>`
    },
    {
      type: 'paragraph',
      text: 'üñ•Ô∏è N√•r du √•pner denne fila i nettleseren (f.eks. Chrome), kan du bruke ^^nettleserkonsollen^^ for √• se hva som skjer. H√∏yreklikk og velg **"Inspiser"** ‚Üí g√• til **"Console"-fanen**.'
    },
    {
      type: 'paragraph',
      text: 'üìù Skriv koden din inne i `<script>`-taggen. Bruk `console.log()` for √• skrive ut informasjon og teste hva koden gj√∏r.'
    },
    {
      type: 'paragraph',
      text: 'üöÄ Klar? Bla ned til oppgavene og pr√∏v selv! Husk at du kan kommentere med `// Oppgave 1`, `// Oppgave 2`, osv. for √• holde orden.'
    },

    // Oppgavene
    {
      type: 'task',
      number: 1,
      title: "Enkel variabelbruk",
      description: "Definer tre variabler: `firstName`, `lastName` og `age`. Gi dem verdier og skriv dem i konsollen."
    },
    {
      type: 'task',
      number: 2,
      title: "Endre variabler",
      description: "Lag en variabel `favoriteColor` med `let`. Gi den en verdi og skriv den ut. Endre s√• verdien av variabelen og skriv ut den nye verdien."
    },
    {
      type: 'task',
      number: 3,
      title: "Bruk av const",
      description: "Definer en konstant `PI` med verdien `3.14`. Pr√∏v √• endre verdien (spoiler: det vil ikke fungere!). Hva skjer?"
    },
    {
      type: 'task',
      number: 4,
      title: "Variabelscope",
      description: "Definer en variabel med `let` inne i en `if`-setning. Fors√∏k √• bruke den utenfor `if`-setningen. Hva skjer?"
    },
    {
      type: 'task',
      number: 5,
      title: "Lag en kalkulator",
      description: "Lag to variabler, `num1` og `num2`, og gj√∏r noen enkle berekninger med dem. Skriv ut summen, differansen, produktet og kvotienten i konsollen."
    },
    {
      type: 'paragraph',
      text: 'Disse oppgavene hjelper deg √• forst√• hvordan variabler fungerer i JavaScript. Husk at variabler er en av de viktigste delene av programmering, s√• det er viktig √• √∏ve p√• dem p√• riktig m√•te. Lykke til! üöÄ'
    }
  ]
}

];
